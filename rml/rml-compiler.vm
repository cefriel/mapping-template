## This template reuses and adapts the "mapping query" from the SDM-RDFizer source code (https://github.com/SDM-TIB/SDM-RDFizer) developed by the Scientific Data Management Group at TIB.
## The query is modified to be compliant with the latest RML specification (https://w3id.org/rml).

#set ( $prefixes = $reader.setPrefixes("
    prefix rml: <http://w3id.org/rml/>
    prefix dcat: <http://www.w3.org/ns/dcat#>
    prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#>
") )

#set($d="$") 
#set($h="#") 
#set($pa="{") 
#set($pc="}")
#set($defaultNamespace = "http://www.cefriel.com/kt/")

#set ( $mappings_content= $reader.getDataframe("
SELECT DISTINCT *
WHERE {

	# Subject -------------------------------------------------------------------------
			?triples_map_id rml:logicalSource ?_source .
			OPTIONAL{?_source rml:source ?data_source .}
			OPTIONAL{
                ?data_source a dcat:Distribution .
				?data_source dcat:accessURL ?access_url . # downloadURL would be better
			}
            OPTIONAL{
                ?data_source a rml:RelativePathSource .
                ?data_source rml:root ?root_folder .
				?data_source rml:path ?path .
			}
			OPTIONAL {?_source rml:referenceFormulation ?ref_form .} # missing in BC page
			OPTIONAL { ?_source rml:iterator ?iterator . }
			# replaced with rml:source OPTIONAL { ?_source rr:tableName ?tablename .}
			# removed rml:query OPTIONAL { ?_source rml:query ?query .}
            # TODO Handle rml:null

			?triples_map_id rml:subjectMap ?_subject_map .
			OPTIONAL {?_subject_map rml:template ?subject_template .}
			OPTIONAL {?_subject_map rml:reference ?subject_reference .}
			OPTIONAL {?_subject_map rml:constant ?subject_constant}
            OPTIONAL {?triples_map_id rml:subject ?subject_constant_shortcut .}

			OPTIONAL { ?_subject_map rml:termType ?subject_termtype . }

			OPTIONAL { ?_subject_map rml:graph ?graph_constant_shortcut . }
			OPTIONAL { ?_subject_map rml:graphMap ?_graph_structure .
					   ?_graph_structure rml:constant ?graph_constant . }
            OPTIONAL { ?_subject_map rml:graphMap ?_graph_structure .
					    ?_graph_structure rml:reference ?graph_reference . }
			OPTIONAL { ?_subject_map rml:graphMap ?_graph_structure .
					   ?_graph_structure rml:template ?graph_template . }		   

	# Predicate -----------------------------------------------------------------------
			OPTIONAL {
			?triples_map_id rml:predicateObjectMap ?_predicate_object_map .

			OPTIONAL {
				?_predicate_object_map rml:predicateMap ?_predicate_map .
				?_predicate_map rml:constant ?predicate_constant .
			}
			OPTIONAL {
				?_predicate_object_map rml:predicateMap ?_predicate_map .
				?_predicate_map rml:template ?predicate_template .
			}
			OPTIONAL {
				?_predicate_object_map rml:predicateMap ?_predicate_map .
				?_predicate_map rml:reference ?predicate_reference .
			}
			OPTIONAL {
				?_predicate_object_map rml:predicate ?predicate_constant_shortcut .
			 }

	# Object --------------------------------------------------------------------------
			OPTIONAL {
				?_predicate_object_map rml:objectMap ?_object_map .
				?_object_map rml:constant ?object_constant .
				OPTIONAL {
					?_object_map rml:datatype ?object_datatype .
				}
			}
			OPTIONAL {
				?_predicate_object_map rml:objectMap ?_object_map .
				?_object_map rml:template ?object_template .
				OPTIONAL {?_object_map rml:termType ?term .}
				OPTIONAL {?_object_map rml:languageMap ?language_map.
						  ?language_map rml:reference ?language_value.}
				OPTIONAL {
					?_object_map rml:datatype ?object_datatype .
				}
			}
			OPTIONAL {
				?_predicate_object_map rml:objectMap ?_object_map .
				?_object_map rml:reference ?object_reference .
				OPTIONAL { ?_object_map rml:language ?language .}
				OPTIONAL {?_object_map rml:languageMap ?language_map.
						  ?language_map rml:reference ?language_value.}
				OPTIONAL {?_object_map rml:termType ?term .}
				OPTIONAL {
					?_object_map rml:datatype ?object_datatype .
				}
			}
			OPTIONAL {
				?_predicate_object_map rml:objectMap ?_object_map .
				?_object_map rml:parentTriplesMap ?object_parent_triples_map .
				OPTIONAL {
					?_object_map rml:joinCondition ?join_condition .
					?join_condition rml:child ?child_value;
								 rml:parent ?parent_value.
					OPTIONAL {?_object_map rml:termType ?term .}
				}
			}
			OPTIONAL {
				?_predicate_object_map rml:object ?object_constant_shortcut .
			}
			OPTIONAL {?_predicate_object_map rml:graph ?predicate_object_graph .}
			OPTIONAL { ?_predicate_object_map  rml:graphMap ?_graph_structure .
					   ?_graph_structure rml:constant ?predicate_object_graph  . }
			OPTIONAL { ?_predicate_object_map  rml:graphMap ?_graph_structure .
					   ?_graph_structure rml:template ?predicate_object_graph  . }	
			}
			OPTIONAL {
				?_source a d2rq:Database;
  				d2rq:jdbcDSN ?jdbcDSN; 
  				d2rq:jdbcDriver ?jdbcDriver; 
			    d2rq:username ?user;
			    d2rq:password ?password .
			}
		} 
") )

#* Needed because there can be more than one class *#
#set ( $defaultSubjectClassesQuery = "
    SELECT DISTINCT *
    WHERE {
        <TRIPLES_MAP> rml:subjectMap ?_subject_map .
        ?_subject_map rml:class ?subject_rdf_class . 
    }
")          

#* Get map of lists ordered by Logical Source *#
#set($lmSources = $functions.getListMap($mappings_content, "_source"))

#foreach($lmSource in $lmSources.entrySet())
    #set($source = $lmSource.value.get(0))
    #if($source.access_url)
        #set($sourceUrl = $functions.replace($source.access_url, "file://", ""))
    #elseif($source.path)
        #set($sourceUrl = "./" + $source.path)
    #end
    #set($refForm = $source.ref_form)
    #set($sourceHash = $functions.hash($source._source))

    #* TODO Handle iterator *#
    #set($iterator = $source.iterator)
    
    #* Get a single dataframe for each logical source considering referenced "fields" *#
    #* TODO Check if can be optimized to get a single dataframe also for different
    logical sources accessing the same "input" *#

    #set($lmTmSource = $functions.getListMap($lmSource.value,"triples_map_id"))

    #set($lmSourceReferences = [])

    #foreach($lmTmSourceEntry in $lmTmSource.entrySet())
        #* Same subject/graph for the entire triple map *#
        #set($stm = $lmTmSourceEntry.value.get(0))
        #* SUBJECT *#
        #if($stm.subject_template)
            #set($foo = $lmSourceReferences.addAll($functions.getReferencesFromTemplate($stm.subject_template)))
        #elseif($stm.subject_reference)
            #set($foo = $lmSourceReferences.add($stm.subject_reference))
        #end
        #* GRAPH *#
        #if($stm.graph_template)
            #set($foo = $lmSourceReferences.addAll($functions.getReferencesFromTemplate($stm.graph_template)))
        #elseif($stm.graph_reference)
            #set($foo = $lmSourceReferences.add($stm.graph_reference))
        #end

        #* PO MAPS *#
        #foreach($tm in $lmTmSourceEntry.value)
            #* PREDICATE *#
            #if($tm.predicate_template)
                #set($foo = $lmSourceReferences.addAll($functions.getReferencesFromTemplate($tm.predicate_template)))
            #elseif($tm.predicate_reference)
                #set($foo = $lmSourceReferences.add($tm.predicate_reference))
            #end

            #* OBJECT *#
            #if($tm.object_template)
                #set($foo = $lmSourceReferences.addAll($functions.getReferencesFromTemplate($tm.object_template)))
            #elseif($tm.object_reference)
                #set($foo = $lmSourceReferences.add($tm.object_reference))
            #* JOIN *#
            #elseif($tm.object_parent_triples_map)
                #set($foo = $lmSourceReferences.add($tm.child_value))
                #set($foo = $lmSourceReferences.add($tm.parent_value))
            #end
        #end
    #end

    #set($lmSourceReferences = $functions.getDistinct($lmSourceReferences))
    #* Default value to false *#
    #set($hashVariable = false)

    #if($refForm == "http://w3id.org/rml/CSV")
        ${h}set(${d}reader_$sourceHash = ${d}functions.getCSVReaderFromFile("$sourceUrl"))
        #* TODO Get dataframe for CSV considering only referenced columns *#
        ${h}set(${d}dataframe_$sourceHash = ${d}reader_${sourceHash}.getDataframe())
    #elseif ($refForm == "http://w3id.org/rml/XPath")
        ${h}set(${d}reader_$sourceHash = ${d}functions.getXMLReaderFromFile("$sourceUrl"))
        #set($hashVariable = true)

        #* 
            Access the XML input to extract the dataframe considering references 
            in the triplemaps associated with the same logical source 
        *#
        #if($functions.checkList($lmSourceReferences))
            #set($xmlQuery = '
                for $i in ITERATOR
                return map {
            ')
            #set($xmlQuery = $xmlQuery.replace("ITERATOR", $iterator))
            #foreach($ref in $lmSourceReferences) 
                #set($refHash = $functions.hash($ref))
                #* Check if text() should be added *#
                #set ($parts = $ref.split("/"))
                #if(!$parts.get($parts.size() - 1).contains("@"))
                    #set($ref = "${ref}/text()")
                #end
                #set($referenceQuery = '"VARIABLE": $i/REFERENCE,
                ')
                #set($referenceQuery = $referenceQuery.replace("VARIABLE", $refHash))
                #set($referenceQuery = $referenceQuery.replace("REFERENCE", $ref))
                #set($xmlQuery = "${xmlQuery}${referenceQuery}")
            #end
            #* Remove last comma *#
            #set($xmlQuery = $xmlQuery.trim())
            #set($xmlQuery = $xmlQuery.substring(0, $xmlQuery.length() - 1))
            #set($xmlQuery = "${xmlQuery} }")

            ${h}set(${d}dataframe_$sourceHash = ${d}reader_${sourceHash}.getDataframe('$xmlQuery'))
        #else
            #* CONSTANT values, iterate once *#
            ${h}set(${d}dataframe_$sourceHash = {"ITERATOR" : "ONCE"})
        #end

    #elseif ($refForm=="http://w3id.org/rml/JSONPath")
        ${h}set(${d}reader_$sourceHash = ${d}functions.getJSONReaderFromFile("$sourceUrl"))
        #set($hashVariable = true)

        #* 
            Access the JSON input to extract the dataframe considering references 
            in the triplemaps associated with the same logical source 
        *#
        #if($functions.checkList($lmSourceReferences))
            #set($jsonQuery = '{
                "iterator": "ITERATOR_PATH",
                "paths": {
            ')
            #set($jsonQuery = $jsonQuery.replace("ITERATOR_PATH", $iterator))
            #foreach($ref in $lmSourceReferences) 
                #set($refHash = $functions.hash($ref))
                #set($referenceQuery = '"VARIABLE": "REFERENCE",
                ')
                #set($referenceQuery = $referenceQuery.replace("VARIABLE", $refHash))
                #set($referenceQuery = $referenceQuery.replace("REFERENCE", $ref))
                #set($jsonQuery = "${jsonQuery}${referenceQuery}")
            #end
            #* Remove last comma *#
            #set($jsonQuery = $jsonQuery.trim())
            #set($jsonQuery = $jsonQuery.substring(0, $jsonQuery.length() - 1))
            #set($jsonQuery = "${jsonQuery} }}")

            ${h}set(${d}dataframe_$sourceHash = ${d}reader_${sourceHash}.getDataframe('$jsonQuery'))
        #else
            #* CONSTANT values, iterate once *#
            ${h}set(${d}dataframe_$sourceHash = {"ITERATOR" : "ONCE"})
        #end
    #else
        ${d}error: "No compatible Reader found." 
    #end
    
    #* ########## GENERATE TRIPLES ########## *#
    
    #foreach($lmTmSourceEntry in $lmTmSource.entrySet())
        #* SUBJECT *#
        #set($subject = $null)
        #set($stm = $lmTmSourceEntry.value.get(0))
        #* TODO Check if default namespace should be added *#
        #if($stm.subject_template)
            #set($subject = $functions.resolveTemplate($stm.subject_template))
        #elseif($stm.subject_reference)
            #set($subject = $functions.resolveReference($stm.subject_reference))
        #elseif($stm.subject_constant)
            #set($subject = $stm.subject_constant)
        #elseif($stm.subject_constant_shortcut)
            #set($subject = $stm.subject_constant_shortcut)
        #end
        
        #set($subject = $functions.encodeReferencesIRI($subject, $hashVariable))

        #if ($stm.subject_termtype == "http://w3id.org/rml/BlankNode")
            #set($subject = "_:" + $subject)
        #elseif ($stm.subject_termtype == "http://w3id.org/rml/Literal")
            ${d}error: subject can not be of type Literal.
        #else
            #set($subject = '<' + $subject + '>')
        #end

        #* GRAPH *#
        #set($graph = $null)
        #* TODO Check if only one graph can be defined for each triplemap *#
        #if($stm.graph_template)
            #set($graph = $functions.resolveTemplate($stm.graph_template))
        #elseif($stm.graph_reference)
            #set($graph = $functions.resolveReference($stm.graph_reference))
        #elseif($stm.graph_constant)
            #set($graph = $stm.graph_constant)
        #elseif($stm.graph_constant_shortcut)
            #set($graph = $stm.graph_constant_shortcut)
        #end
        #* rml:defaultGraph mapped to the default graph *#
        #if($graph == "http://w3id.org/rml/defaultGraph")
            #set($graph = $null)
        #else
            #set($graph = $functions.encodeReferencesIRI($graph, $hashVariable))
        #end
        
        #* Init template execution *#
        ${h}foreach(${d}i in ${d}dataframe_$sourceHash)

        #set($subjectClassesQuery = $defaultSubjectClassesQuery.replace("TRIPLES_MAP",$stm.triples_map_id))
        #set($subjectClasses = $reader.getDataframe($subjectClassesQuery))
        #foreach($subjClass in $subjectClasses)
            #if($graph)
                $subject <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <$subjClass.subject_rdf_class> <$graph>.
            #else
                $subject <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <$subjClass.subject_rdf_class> .
            #end
        #end

        #* PO MAPS *#
        #foreach($tm in $lmTmSourceEntry.value)

            #* PREDICATE *#
            #set($predicate = $null)
            #if($tm.predicate_template)
                #set($predicate = $functions.resolveTemplate($tm.predicate_template))
            #elseif($tm.predicate_reference)
                #set($predicate = $functions.resolveReference($tm.predicate_reference))
            #elseif($tm.predicate_constant)
                #set($predicate = $tm.predicate_constant)
            #elseif($tm.predicate_constant_shortcut)
                #set($predicate = $tm.predicate_constant_shortcut)
            #end
            #set($predicate = $functions.encodeReferencesIRI($predicate, $hashVariable))

            #* OBJECT *#
            #set($objects = [])
            #if($tm.object_template)
                #set($foo = $objects.add($functions.resolveTemplate($tm.object_template)))
            #elseif($tm.object_reference)
                #set($foo = $objects.add($functions.resolveReference($tm.object_reference)))
            #elseif($tm.object_constant)
                #set($foo = $objects.add($tm.object_constant))
            #elseif($tm.object_constant_shortcut)
                #set($foo = $objects.add($tm.object_constant_shortcut))
            #* TODO Implement
            #elseif($tm.object_parent_triples_map)
                #set($joinedDataFrame = $functions.join($thisDataFame, $functions.getDataFrame($tm.object_parent_triples_map))
                #set($objects = $functions.getRelevantObjects($joinedDataFrame)
            *#
            #end

            #foreach($object in $objects) 
                #* 
                    TODO Improve condition using FILTER (isLiteral(?value)) in SPARQL Query
                    and checking the object_termtype OR implementing a $functions.isIRI($object)
                *#
                #if($object.contains("://"))
                    #set($object = '<' + $functions.encodeReferencesIRI($object, $hashVariable) + '>')
                #else
                    #set($object = '"' + $functions.encodeReferencesLiteral($object, $hashVariable) + '"')
                #end

                #* Generate the triple/quad . *#
                #if($graph)
                    $subject <$predicate> $object <$graph>.
                #else
                    $subject <$predicate> $object .
                #end
            #end

        #end   
        ${h}end
    #end

#end

#*
    
  #end

  #foreach($tm in $ltm_content.entrySet())
  #set($tm_id = $functions.hash($tm.key.toString()))
  #if ($tm.value.get(0).iterator_tech=="http://semweb.mmlab.be/ns/ql#XPath")
  tripleMaker_$tm_id
  #elseif ($tm.value.get(0).iterator_tech=="http://semweb.mmlab.be/ns/ql#JSONPath")
  tripleMaker_$tm_id
  #else
  tripleMaker_$tm_id
  #end

      http://www.w3.org/1999/02/22-rdf-syntax-ns#type
      
    #foreach($tmp in $tm.value)
        ## <!-- P-O $tmp -->
        #if($tmp.predicate_constant)
            $tmp.predicate_constant
        #elseif($tmp.predicate_template)
            $tmp.predicate_template
        #elseif($tmp.predicate_reference)
            ${pa}$tmp.predicate_reference${pc}
        #end
    #end
    
    #foreach($tmp in $tm.value)
        #if($tmp.subject_rdf_class)<value>$tmp.subject_rdf_class</value>#end
    #end      
    #foreach($tmp in $tm.value)
        #if($tmp.object_constant)$tmp.object_constant
        #elseif($tmp.object_template)$tmp.object_template
        #elseif($tmp.object_reference)${pa}$tmp.object_reference${pc}
        #end
    #end

    #foreach($tmp in $tm.value)
        #if($tmp.subject_rdf_class)
        http://www.w3.org/ns/r2rml#IRI
        #end
    #end
      
      #foreach($tmp in $tm.value)
        ## <!-- Object type $tmp -->
        #if($tmp.object_constant)
            #if($tmp.object_constant.toString().contains("://"))
            http://www.w3.org/ns/r2rml#IRI
            #else
                #if($tmp.object_language)
                http://www.w3.org/ns/r2rml#Literal@$tmp.object_language
                #else
                http://www.w3.org/ns/r2rml#Literal
                #end
            #end
        #elseif($tmp.object_reference)
                #if($tmp.object_language)
                http://www.w3.org/ns/r2rml#Literal@$tmp.object_language
                #else
                http://www.w3.org/ns/r2rml#Literal
                #end
        #else
            $tmp.object_termtype
        #end
      #end
  #end

#foreach($source in $sources)
#set ( $source_descr = $reader.executeQueryStringValue("SELECT DISTINCT ?data_format ?iterator
		WHERE {
            ?tm a rr:TriplesMap;
                rml:logicalSource [
                    rml:source ""$source.data_source"";
                    rml:referenceFormulation ?data_format;
                    rml:iterator ?iterator
                ].
        }
        GROUP BY ?iterator ?data_format
") )

*#