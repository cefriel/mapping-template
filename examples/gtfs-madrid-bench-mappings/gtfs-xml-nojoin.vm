@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix rev: <http://purl.org/stuff/rev#> .
@prefix gtfs: <http://vocab.gtfs.org/terms#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix schema: <http://schema.org/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix ex: <http://transport.linkeddata.es/madrid/> .

#set ($agencyFile = "./data/xml/AGENCY.xml")
#set ($agencyReader = $functions.getXMLReaderFromFile($agencyFile))
#set ($agencyData = $agencyReader.executeQueryStringValue('
for $agency in /Category//Record
return map {
"agency_id": $agency/agency_id/text(),
"agency_name": $agency/agency_name/text(),
"agency_url": $agency/agency_url/text(),
"agency_timezone": $agency/agency_timezone/text(),
"agency_lang": $agency/agency_lang/text(),
"agency_phone": $agency/agency_phone/text(),
"agency_fare_url": $agency/agency_fare_url/text()}'))

#set ($calendarDatesFile = "./data/xml/CALENDAR_DATES.xml")
#set ($calendarDatesReader = $functions.getXMLReaderFromFile($calendarDatesFile))
#set ($calendarDatesData = $calendarDatesReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"service_id": $x/service_id/text(),
"date": $x/date/text(),
"exception_type": $x/exception_type/text()}'))

#set ($calendarFile = "./data/xml/CALENDAR.xml")
#set ($calendarReader = $functions.getXMLReaderFromFile($calendarFile))
#set ($calendarData = $calendarReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"service_id": $x/service_id/text(),
"monday": $x/monday/text(),
"tuesday": $x/tuesday/text(),
"wednesday": $x/wednesday/text(),
"thursday": $x/thursday/text(),
"friday": $x/friday/text(),
"saturday": $x/saturday/text(),
"sunday": $x/sunday/text(),
"start_date": $x/start_date/text(),
"end_date": $x/end_date/text()}'))

#set ($feedFile = "./data/xml/FEED_INFO.xml")
#set ($feedReader = $functions.getXMLReaderFromFile($feedFile))
#set ($feedData = $feedReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"feed_publisher_name": $x/feed_publisher_name/text(),
"feed_publisher_url": $x/feed_publisher_url/text(),
"feed_lang": $x/feed_lang/text(),
"feed_start_date": $x/feed_start_date/text(),
"feed_end_date": $x/feed_end_date/text(),
"feed_version": $x/feed_version/text()
}'))

#set ($shapeFile = "./data/xml/SHAPES.xml")
#set ($shapeReader = $functions.getXMLReaderFromFile($shapeFile))
#set ($shapeData = $shapeReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"shape_id": $x/shape_id/text(),
"shape_pt_lat": $x/shape_pt_lat/text(),
"shape_pt_lon": $x/shape_pt_lon/text(),
"shape_pt_sequence": $x/shape_pt_sequence/text(),
"shape_dist_traveled": $x/shape_dist_traveled/text()
}'))

#set ($stopsFile = "./data/xml/STOPS.xml")
#set ($stopsReader = $functions.getXMLReaderFromFile($stopsFile))
#set ($stopsData = $stopsReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"stop_id": $x/stop_id/text(),
"stop_code": $x/stop_code/text(),
"stop_name": $x/stop_name/text(),
"stop_desc": $x/stop_desc/text(),
"stop_lat": $x/stop_lat/text(),
"stop_lon": $x/stop_lon/text(),
"stop_url": $x/stop_url/text(),
"location_type": $x/location_type/text(),
"stop_timezone": $x/stop_timezone/text(),
"zone_id": $x/zone_id/text(),
"wheelchair_boarding": $x/wheelchair_boarding/text()}'))

#set ($routeFile = "./data/xml/ROUTES.xml")
#set ($routesReader = $functions.getXMLReaderFromFile($routeFile))
#set ($routesData = $routesReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"route_id": $x/route_id/text(),
"agency_id": $x/agency_id/text(),
"route_short_name": $x/route_short_name/text(),
"route_long_name": $x/route_long_name/text(),
"route_desc": $x/route_desc/text(),
"route_type": $x/route_type/text(),
"route_url": $x/route_url/text(),
"route_color": $x/route_color/text(),
"route_text_color": $x/route_text_color/text()}'))

#set ($tripsFile = "./data/xml/TRIPS.xml")
#set ($tripsReader = $functions.getXMLReaderFromFile($tripsFile))
#set ($tripsData = $tripsReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"route_id": $x/route_id/text(),
"service_id": $x/service_id/text(),
"trip_id": $x/trip_id/string(),
"trip_headsign": $x/trip_headsign/text(),
"trip_short_name": $x/trip_short_name/text(),
"direction_id": $x/direction_id/text(),
"block_id": $x/block_id/text(),
"shape_id": $x/shape_id/text(),
"wheelchair_accessible": $x/wheelchair_accessible/text()}'))

#set ($stopTimesFile = "./data/xml/STOP_TIMES.xml")
#set ($stopTimesReader = $functions.getXMLReaderFromFile($stopTimesFile))
#set ($stopTimesData = $stopTimesReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"trip_id": $x/trip_id/text(),
"arrival_time": $x/arrival_time/text(),
"departure_time": $x/departure_time/text(),
"stop_id": $x/stop_id/text(),
"stop_headsign": $x/stop_headsign/text(),
"pickup_type": $x/pickup_type/text(),
"drop_off_type": $x/drop_off_type/text(),
"shape_dist_traveled": $x/shape_dist_traveled/text()}'))

#set ($frequenciesFile = "./data/xml/FREQUENCIES.xml")
#set ($frequenciesReader = $functions.getXMLReaderFromFile($frequenciesFile))
#set ($frequenciesData = $frequenciesReader.executeQueryStringValue('
for $x in /Category//Record
return map {
"trip_id": $x/trip_id/text(),
"start_time": $x/start_time/text(),
"end_time": $x/end_time/text(),
"headway_secs": $x/headway_secs/text(),
"exact_times": $x/exact_times/text()}'))

## AGENCY
#foreach($row in $agencyData)
 ex:agency\/$row.agency_id a gtfs:Agency ;
 foaf:page <${row.agency_url}> ;
 foaf:name "$row.agency_name" ;
 gtfs:timeZone "$row.agency_timezone" ;
 dct:language "$row.agency_lang" ;
 foaf:phone "$row.agency_phone" ;
 gtfs:fareUrl <${row.agency_fare_url}> .
#end
## AGENCY END

## CALENDAR DATES
#foreach($service_id in $mCalendarDates.keySet())
 ex:metro\/services\/${service_id} a gtfs:Service .
#end

#foreach($row in $calendarDatesData)
 ex:metro\/services\/${row.service_id} gtfs:serviceRule ex:metro\/calendar_date_rule\/${row.service_id}-${row.date} .

 ex:metro\/calendar_date_rule\/${row.service_id}-${row.date} a gtfs:CalendarDateRule ;
 dct:date "$row.date"^^xsd:date ;
 gtfs:dateAddition "$row.exception_type"^^xsd:boolean .
#end
## CALENDAR DATES END

## CALENDAR
#foreach($service_id in $mCalendar.keySet())
 ex:metro\/services\/${service_id} a gtfs:Service .
#end

#foreach($row in $calendarData)
 ex:metro\/services\/${row.service_id} gtfs:serviceRule ex:metro\/calendar_rules\/${row.service_id} .

 ex:metro\/calendar_rules\/${row.service_id} a gtfs:CalendarRule ;
 gtfs:monday "$row.monday"^^xsd:boolean ;
 gtfs:tuesday "$row.tuesday"^^xsd:boolean  ;
 gtfs:wednesday "$row.wednesday"^^xsd:boolean  ;
 gtfs:thursday "$row.thursday"^^xsd:boolean  ;
 gtfs:friday "$row.friday"^^xsd:boolean  ;
 gtfs:saturday "$row.saturday"^^xsd:boolean  ;
 gtfs:sunday "$row.sunday"^^xsd:boolean  ;
 schema:startDate "$row.start_date"^^xsd:date  ;
 schema:endDate "$row.end_date"^^xsd:date .
#end
## CALENDAR END

## FEED
#foreach($row in $feedData)
 ex:metro\/feed\/${row.feed_publisher_name} a gtfs:Feed ;
 dct:publisher "$row.feed_publisher_name" ;
 foaf:page <$row.feed_publisher_url> ;
 dct:language "$row.feed_lang" ;
 schema:startDate "$row.feed_start_date"^^xsd:date ;
 schema:endDate "$row.feed_end_date"^^xsd:date ;
 schema:version "$row.feed_version" .
#end
## FEED END

## SHAPE
#foreach($shape_id in $mShapes.keySet())
 ex:metro\/shape\/${shape_id} a gtfs:Shape .
#end
## SHAPE END

## SHAPE POINTS
#foreach($row in $shapeData)
 ex:metro\/shape\/${row.shape_id} gtfs:shapePoint ex:metro\/shape_point\/${row.shape_id}-${row.shape_pt_sequence} .

 ex:metro\/shape_point\/${row.shape_id}-${row.shape_pt_sequence} a gtfs:ShapePoint ;
 geo:lat "$row.shape_pt_lat"^^xsd:double ;
 geo:long "$row.shape_pt_lon"^^xsd:double ;
 gtfs:pointSequence "$row.shape_pt_sequence" ;
 gtfs:distanceTraveled "$row.shape_dist_traveled" .
#end
## SHAPE POINTS END

## STOPS
#foreach($row in $stopsData)
 ex:metro\/stops\/$row.stop_id a gtfs:Stop ;
 gtfs:code "$row.stop_code" ;
 dct:identifier "$row.stop_id" ;
 foaf:name "$row.stop_name" ;
 dct:description "$row.stop_desc" ;
 geo:lat "$row.stop_lat"^^xsd:double ;
 geo:long "$row.stop_lon"^^xsd:double ;
 foaf:page <${row.stop_url}> ;
 gtfs:locationType <http://transport.linkeddata.es/resource/LocationType/${row.location_type}> ;
 #if($row.zone_id)gtfs:zone "$row.zone_id" ;#end
 #if($row.stop_timezone)gtfs:timeZone "$row.stop_timezone" ;#end
 gtfs:parentStation ex:metro\/stops\/$row.stop_id ;
 gtfs:wheelchairAccessible <http://transport.linkeddata.es/resource/WheelchairBoardingStatus/${row.wheelchair_boarding}> .
#end
## STOPS END

## ROUTES
#foreach($row in $routesData)
 ex:metro\/routes\/$row.route_id a gtfs:Route ;
 gtfs:shortName "$row.route_short_name" ;
 gtfs:longName "$row.route_long_name" ;
 dct:description "$row.route_desc" ;
 gtfs:routeType <http://transport.linkeddata.es/resource/RouteType/${row.route_type}> ;
 gtfs:routeUrl <${row.route_url}> ;
 gtfs:color "$row.route_color" ;
 gtfs:agency ex:agency\/$row.agency_id ;
 gtfs:textColor "$row.route_text_color" .
#end
## ROUTES END

## TRIPS
#foreach($row in $tripsData)
 ex:metro\/trips\/$row.trip_id a gtfs:Trip ;
 gtfs:headsign "$row.trip_headsign" ;
 gtfs:shortName "$row.trip_short_name" ;
 gtfs:direction "$row.direction_id" ;
 gtfs:block "$row.block_id" ;
 gtfs:service ex:metro\/services\/$row.service_id ;
 gtfs:route ex:metro\/routes\/$row.route_id ;
 gtfs:shape ex:metro\/shape\/$row.shape_id ;
 gtfs:wheelchairAccessible <http://transport.linkeddata.es/resource/WheelchairBoardingStatus/${row.wheelchair_accessible}> .
#end
## TRIPS END

## STOP TIMES
#foreach($row in $stopTimesData)
 ex:metro\/stoptimes\/${row.trip_id}-${row.stop_id}-${row.arrival_time} rdf:type gtfs:StopTime ;
 gtfs:arrivalTime "$row.arrival_time"^^xsd:duration ;
 gtfs:departureTime "$row.departure_time"^^xsd:duration ;
 #if($row.stop_sequence)gtfs:stopSequence "$row.stop_sequence"^^xsd:integer ;#end
 gtfs:headsign "$row.stop_headsign" ;
 gtfs:pickupType <http://transport.linkeddata.es/resource/PickupType/${row.pickup_type}> ;
 gtfs:dropOffType <http://transport.linkeddata.es/resource/DropOffType/${row.drop_off_type}> ;
 gtfs:trip ex:metro\/trips\/$row.trip_id ;
 gtfs:stop ex:metro\/stops\/$row.stop_id ;
 gtfs:distanceTraveled "${row.shape_dist_traveled}" .
#end
## STOP TIMES END

## FREQUENCIES
#foreach($row in $frequenciesData)
 ex:metro\/frequency\/${row.trip_id}-${row.start_time} a gtfs:Frequency ;
 gtfs:startTime "$row.start_time" ;
 gtfs:endTime "$row.end_time" ;
 gtfs:headwaySeconds "$row.headway_secs"^^xsd:integer ;
 gtfs:trip ex:metro\/trips\/$row.trip_id ;
 gtfs:exactTimes "$row.exact_times"^^xsd:boolean .
#end
## FREQUENCIES END